# Generated by Django 4.0.2 on 2022-05-30 12:17

import django.core.validators
from django.db import migrations, models
import farms.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Camera",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=20)),
                ("channel", models.CharField(default="0", max_length=10)),
                ("url", models.CharField(default="http://example.com", max_length=200)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Farm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("farm_code", models.CharField(editable=False, max_length=15)),
                (
                    "name",
                    models.CharField(
                        max_length=14,
                        unique=True,
                        validators=[farms.models.farm_name_validator],
                    ),
                ),
                (
                    "type",
                    models.IntegerField(choices=[(0, "Nursery"), (1, "Commercial")]),
                ),
                (
                    "no_of_domes",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(100),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                ("no_of_trays", models.IntegerField(blank=True, null=True)),
                (
                    "no_of_growing_lines",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(500),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "no_of_irrigation_tanks",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(50),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                (
                    "no_of_cooling_tanks",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(50),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                (
                    "no_of_ro_tanks",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(50),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                (
                    "no_of_rw_tanks",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(50),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                (
                    "inverter_power_output",
                    models.DecimalField(decimal_places=3, max_digits=6),
                ),
                (
                    "inverter_phasing",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(3),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                (
                    "battery_capacity",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(1000),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "solar_power_output",
                    models.DecimalField(decimal_places=3, max_digits=6),
                ),
                ("locality", models.CharField(max_length=30)),
                ("city", models.CharField(max_length=50)),
                (
                    "area",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                (
                    "length",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=6, null=True
                    ),
                ),
                (
                    "width",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=6, null=True
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("direction", models.FloatField(blank=True, null=True)),
                ("address", models.CharField(blank=True, max_length=100, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("rw_tank_config", models.JSONField(blank=True, null=True)),
                ("ro_tank_config", models.JSONField(blank=True, null=True)),
                ("irrigation_tanks_config", models.JSONField(blank=True, null=True)),
                ("cooling_tanks_config", models.JSONField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FarmManagerAttendance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "action",
                    models.IntegerField(choices=[(0, "PUNCH IN"), (1, "PUNCH OUT")]),
                ),
            ],
            options={
                "verbose_name": "Farm Manager Attendance",
                "verbose_name_plural": "Farm Manager Attendance",
            },
        ),
        migrations.CreateModel(
            name="IOTBox",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("serial_number", models.CharField(max_length=20)),
                (
                    "uuid",
                    models.CharField(default=uuid.uuid4, editable=False, max_length=50),
                ),
                ("params", models.JSONField(blank=True, default=dict, null=True)),
                ("local_ip", models.CharField(max_length=16)),
                ("mqtt_port", models.IntegerField()),
                ("http_port", models.IntegerField()),
            ],
            options={
                "verbose_name": "IOT Box",
                "verbose_name_plural": "IOT Boxes",
            },
        ),
        migrations.CreateModel(
            name="IssueTracker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("datetime", models.DateTimeField()),
                ("component", models.CharField(max_length=30)),
                ("issue", models.CharField(max_length=30)),
                ("photo", models.URLField()),
                ("actions", models.CharField(max_length=20)),
                (
                    "priority",
                    models.IntegerField(
                        choices=[
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Urgent"),
                            (5, "Critical"),
                        ]
                    ),
                ),
                ("status", models.IntegerField()),
            ],
            options={
                "verbose_name": "Issue Tracker",
                "verbose_name_plural": "Issue Tracker",
            },
        ),
        migrations.CreateModel(
            name="VisitorEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("datetime", models.DateTimeField()),
                ("name", models.CharField(max_length=50)),
                ("address", models.CharField(max_length=50)),
                (
                    "mobile_number",
                    models.BigIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1000000000),
                            django.core.validators.MaxValueValidator(9999999999),
                        ]
                    ),
                ),
                ("purpose_of_visit", models.CharField(max_length=50)),
                ("feedback", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "Visitor Entry",
                "verbose_name_plural": "Visitor Entries",
            },
        ),
    ]
